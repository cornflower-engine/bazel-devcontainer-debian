""

module(
    name = "cornflower_bazel_devcontainer",
    version = "",
)

# --- Platform Defintions (OS, Architecture) ---
bazel_dep(name = "platforms", version = "0.0.11")

# --- TAR Archive Manipulation Utilities ---
bazel_dep(name = "rules_pkg", version = "1.1.0")

# --- Rules for Building a Docker Container ---
bazel_dep(name = "rules_oci", version = "2.2.5")
bazel_dep(name = "rules_distroless", version = "0.5.1")

register_toolchains(
    "//tools/cosign:cosign_toolchain",
)

# --- SBOM Generation ---
bazel_dep(name = "rules_syft", version = "0.0.2")

# --- Hermetic Language Toolchains ---
bazel_dep(name = "rules_python", version = "1.3.0")
bazel_dep(name = "hermetic_cc_toolchain", version = "3.2.0")

cc_toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(
    cc_toolchains,
    "zig_sdk",
    "zig_sdk-linux-amd64",
    "zig_sdk-linux-arm64",
    "zig_sdk-macos-amd64",
    "zig_sdk-macos-arm64",
    "zig_sdk-windows-amd64",
)

register_toolchains(
    "@zig_sdk//toolchain/...",
    "@zig_sdk//libc_aware/toolchain/...",
)

# --- Packages Available via APT ---
apt = use_extension("@rules_distroless//apt:extensions.bzl", "apt")
apt.install(
    name = "apt_packages",
    lock = "//source/apt:apt-packages.lock.json",
    manifest = "//source/apt:apt-packages.yaml",
)
use_repo(apt, "apt_packages")

# --- Manually Downloaded Bazelisk Package ---
bazelisk = use_extension("//source/bazelisk:extensions.bzl", "bazelisk")
use_repo(bazelisk, "bazelisk_amd64", "bazelisk_arm64")

# --- External Tools ---
bazel_dep(name = "rules_multitool", version = "1.2.0")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools/multitool:multitool.lock.json")
use_repo(multitool, "multitool")
